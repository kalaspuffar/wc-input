{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/@polymer/lit-element/lib/updating-element.js","webpack:///./node_modules/@polymer/lit-element/lib/decorators.js","webpack:///./node_modules/@polymer/lit-element/lit-element.js","webpack:///./wc-input.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","[object Object]","result","element","this","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","length","indexOf","stringForPart","strings","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","removeChild","isTemplatePartActive","part","createComment","walkerNodeFilter","NodeFilter","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","removeNodesFromTemplate","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","undefined","forEach","countNodes","DOCUMENT_FRAGMENT_NODE","startIndex","isCEPolyfill","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","directives","WeakMap","isDirective","noChange","template_instance_TemplateInstance","processor","getTemplate","_parts","_getTemplate","values","setValue","commit","fragment","cloneNode","importNode","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","html","isTextBinding","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","isPrimitive","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","Array","isArray","iterator","_getValue","comitter","committer","directive","parts_NodePart","templateFactory","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","textContent","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","parts_EventPart","eventName","removeEventListener","addEventListener","event","handleEvent","templateCaches","Map","render_parts","render","templateCache","set","getTemplateElement","firstChild","appendInto","defaultTemplateProcessor","prefix","lit_html_html","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","nativeShadow","querySelector","removes","fromBooleanAttribute","toBooleanAttribute","notEqual","old","defaultPropertyDeclaration","attribute","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_changedProperties","_reflectingProperties","initialize","observedAttributes","_finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","options","superProperties","getPrototypeOf","k","oldValue","_requestPropertyUpdate","configurable","_finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","Boolean","toAttribute","renderRoot","createRenderRoot","_saveInstanceProperties","constructor","attachShadow","styleElement","requestUpdate","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","_invalidate","_valueHasChanged","updateComplete","_hasRequestedUpdate","resolver","previousValidatePromise","_validate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","_query","target","selector","queryFn","proto","lit_element_LitElement","localName","hasRendered","ShadowRoot","host","define","label","ready","inputEl","_root","boxEl","e","keyCode","dispatchEvent","CustomEvent","detail","className","focus"],"mappings":"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","file":"wc-input.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\nexport const directive = (f) => {\n    directives.set(f, true);\n    return f;\n};\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this._getTemplate);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(templateFactory) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.templateFactory = templateFactory;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use it's syntax extension, etc. The template factory comes\n            // from the render function so that it can control caching.\n            const instance = new TemplateInstance(template, value.processor, this.templateFactory);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.templateFactory);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\nexport class EventPart {\n    constructor(element, eventName) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        if ((this._pendingValue == null) !== (this.value == null)) {\n            if (this._pendingValue == null) {\n                this.element.removeEventListener(this.eventName, this);\n            }\n            else {\n                this.element.addEventListener(this.eventName, this);\n            }\n        }\n        this.value = this._pendingValue;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.element, event);\n        }\n        else if (typeof this.value.handleEvent === 'function') {\n            this.value.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory as defaultTemplateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(templateFactory));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n}\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1))];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(templateFactory) {\n        return new NodePart(templateFactory);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateResult } from './template-result.js';\nimport { Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nfunction removeStylesFromLitTemplates(scopeName) {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n}\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, there's no work to do.\n    if (styles.length === 0) {\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\nexport function render(result, container, scopeName) {\n    const hasRendered = parts.has(container);\n    litRender(result, container, shadyTemplateFactory(scopeName));\n    // When rendering a TemplateResult, scope the template with ShadyCSS\n    if (container instanceof ShadowRoot && compatibleShadyCSSVersion &&\n        result instanceof TemplateResult) {\n        // Scope the element template one time only for this scope.\n        if (!shadyRenderSet.has(scopeName)) {\n            const part = parts.get(container);\n            const instance = part.value;\n            prepareTemplateStyles(container, instance.template, scopeName);\n        }\n        // Update styling if this is the initial render to this container.\n        if (!hasRendered) {\n            window.ShadyCSS.styleElement(container.host);\n        }\n    }\n}\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// serializer/deserializers for boolean attribute\nconst fromBooleanAttribute = (value) => value !== null;\nconst toBooleanAttribute = (value) => value ? '' : null;\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = new Promise((resolve) => resolve(true));\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING = 1 << 3;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're _finalized.\n        this._finalize();\n        const attributes = [];\n        for (const [p, v] of this._classProperties) {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        }\n        return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty('_classProperties')) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n        this._classProperties.set(name, options);\n        // Allow user defined accessors by not replacing an existing own-property\n        // accessor.\n        if (this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            get() { return this[key]; },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestPropertyUpdate(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     */\n    static _finalize() {\n        if (this.hasOwnProperty('_finalized') && this._finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor._finalize === 'function') {\n            superCtor._finalize();\n        }\n        this._finalized = true;\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        const props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        const propKeys = [\n            ...Object.getOwnPropertyNames(props),\n            ...(typeof Object.getOwnPropertySymbols === 'function')\n                ? Object.getOwnPropertySymbols(props)\n                : []\n        ];\n        for (const p of propKeys) {\n            // note, use of `any` is due to TypeSript lack of support for symbol in\n            // index types\n            this.createProperty(p, props[p]);\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options !== undefined && options.attribute;\n        return attribute === false\n            ? undefined\n            : (typeof attribute === 'string'\n                ? attribute\n                : (typeof name === 'string' ? name.toLowerCase()\n                    : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's `type`\n     * or `type.fromAttribute` property option.\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options && options.type;\n        if (type === undefined) {\n            return value;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const fromAttribute = type === Boolean\n            ? fromBooleanAttribute\n            : (typeof type === 'function' ? type : type.fromAttribute);\n        return fromAttribute ? fromAttribute(value) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options === undefined || options.reflect === undefined) {\n            return;\n        }\n        // Note: special case `Boolean` so users can use it as a `type`.\n        const toAttribute = options.type === Boolean\n            ? toBooleanAttribute\n            : (options.type &&\n                options.type.toAttribute ||\n                String);\n        return toAttribute(value);\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this.renderRoot = this.createRenderRoot();\n        this._saveInstanceProperties();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        for (const [p] of this.constructor\n            ._classProperties) {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        }\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        for (const [p, v] of this._instanceProperties) {\n            this[p] = v;\n        }\n        this._instanceProperties = undefined;\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Uses ShadyCSS to keep element DOM updated.\n     */\n    connectedCallback() {\n        if ((this._updateState & STATE_HAS_UPDATED)) {\n            if (window.ShadyCSS !== undefined) {\n                window.ShadyCSS.styleElement(this);\n            }\n        }\n        else {\n            this.requestUpdate();\n        }\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attrValue = ctor._propertyValueToAttribute(value, options);\n        if (attrValue !== undefined) {\n            const attr = ctor._attributeNameForProperty(name, options);\n            if (attr !== undefined) {\n                // Track if the property is being reflected to avoid\n                // setting the property again via `attributeChangedCallback`. Note:\n                // 1. this takes advantage of the fact that the callback is synchronous.\n                // 2. will behave incorrectly if multiple attributes are in the reaction\n                // stack at time of calling. However, since we process attributes\n                // in `update` this should not be possible (or an extreme corner case\n                // that we'd like to discover).\n                // mark state reflecting\n                this._updateState = this._updateState | STATE_IS_REFLECTING;\n                if (attrValue === null) {\n                    this.removeAttribute(attr);\n                }\n                else {\n                    this.setAttribute(attr, attrValue);\n                }\n                // mark state not reflecting\n                this._updateState = this._updateState & ~STATE_IS_REFLECTING;\n            }\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (!(this._updateState & STATE_IS_REFLECTING)) {\n            const ctor = this.constructor;\n            const propName = ctor._attributeToPropertyMap.get(name);\n            if (propName !== undefined) {\n                const options = ctor._classProperties.get(propName);\n                this[propName] =\n                    ctor._propertyValueFromAttribute(value, options);\n            }\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        if (name !== undefined) {\n            const options = this.constructor\n                ._classProperties.get(name) ||\n                defaultPropertyDeclaration;\n            return this._requestPropertyUpdate(name, oldValue, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Requests an update for a specific property and records change information.\n     * @param name {PropertyKey} name of requesting property\n     * @param oldValue {any} old value of requesting property\n     * @param options {PropertyDeclaration}\n     */\n    _requestPropertyUpdate(name, oldValue, options) {\n        if (!this.constructor\n            ._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n            return this.updateComplete;\n        }\n        // track old value when changing.\n        if (!this._changedProperties.has(name)) {\n            this._changedProperties.set(name, oldValue);\n        }\n        // add to reflecting properties set\n        if (options.reflect === true) {\n            if (this._reflectingProperties === undefined) {\n                this._reflectingProperties = new Map();\n            }\n            this._reflectingProperties.set(name, options);\n        }\n        return this._invalidate();\n    }\n    /**\n     * Invalidates the element causing it to asynchronously update regardless\n     * of whether or not any property changes are pending. This method is\n     * automatically called when any registered property changes.\n     */\n    async _invalidate() {\n        if (!this._hasRequestedUpdate) {\n            // mark state updating...\n            this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n            let resolver;\n            const previousValidatePromise = this._updatePromise;\n            this._updatePromise = new Promise((r) => resolver = r);\n            await previousValidatePromise;\n            this._validate();\n            resolver(!this._hasRequestedUpdate);\n        }\n        return this.updateComplete;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    /**\n     * Validates the element by updating it.\n     */\n    _validate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        if (this.shouldUpdate(this._changedProperties)) {\n            const changedProperties = this._changedProperties;\n            this.update(changedProperties);\n            this._markUpdated();\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n        else {\n            this._markUpdated();\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() { return this._updatePromise; }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated DOM in the element's\n     * `renderRoot`. Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            for (const [k, v] of this._reflectingProperties) {\n                this._propertyToAttribute(k, this[k], v);\n            }\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) { }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) { }\n}\n/**\n * Maps attribute names to properties; for example `foobar` attribute\n * to `fooBar` property.\n */\nUpdatingElement._attributeToPropertyMap = new Map();\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement._finalized = true;\n/**\n * Memoized list of all class properties, including any superclass properties.\n */\nUpdatingElement._classProperties = new Map();\nUpdatingElement.properties = {};\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n *\n * In TypeScript, the `tagName` passed to `customElement` must be a key of the\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\n * declare the interface in this module:\n *\n *     @customElement('my-element')\n *     export class MyElement extends LitElement {}\n *\n *     declare global {\n *       interface HTMLElementTagNameMap {\n *         'my-element': MyElement;\n *       }\n *     }\n *\n */\nexport const customElement = (tagName) => (clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\n    // is helpful to make sure the decorator is applied to elements however.\n    return clazz;\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n */\nexport const property = (options) => (proto, name) => {\n    proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target, selector) => target.querySelector(selector));\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target, selector) => target.querySelectorAll(selector));\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n */\nfunction _query(queryFn) {\n    return (selector) => (proto, propName) => {\n        Object.defineProperty(proto, propName, {\n            get() { return queryFn(this.renderRoot, selector); },\n            enumerable: true,\n            configurable: true,\n        });\n    };\n}\n//# sourceMappingURL=decorators.js.map","import { render } from 'lit-html/lib/shady-render';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg } from 'lit-html/lit-html';\nexport class LitElement extends UpdatingElement {\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        if (typeof this.render === 'function') {\n            this.constructor\n                .render(this.render(), this.renderRoot, this.localName);\n        }\n        else {\n            throw new Error('render() not implemented');\n        }\n    }\n}\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {LitElement, html} from '@polymer/lit-element';\n/**\n * `wc-input`\n * Webcomponent input design around a new material style.\n *\n * @demo demo/index.html\n */\nclass WcInput extends LitElement {\n  render() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        input {\n          position: relative;\n          width: 100%;\n          background: transparent;\n          top: 16px;\n          border:0;\n          font-size: 13pt;\n          outline-width: 0;\n          margin-top: 3px;\n        }\n\n        .box {\n          background-color: #EEEEEE;\n          text-align: left;\n          height: 48px;\n          cursor: text;\n          border-bottom: 1px solid #888;\n          padding: 5px 0 0 16px;\n          border-top-right-radius: 5px;\n          border-top-left-radius: 5px;\n          transition:\n            border-bottom cubic-bezier(0.6, -0.28, 0.735, 0.045) 0.1s,\n            background-color cubic-bezier(0.6, -0.28, 0.735, 0.045) 0.1s;\n        }\n\n        .box-selected {\n          background-color: #CFD8DC;\n          border-bottom: 3px solid #9C27B0;\n        }\n\n        label {\n          position: relative;\n          font-size: 16pt;\n          top: -16px;\n          color: #000;\n        }\n\n        input:focus + label,\n        input:not(:placeholder-shown) + label {\n          position: relative;\n          color: #9C27B0;\n          top: -32px;\n          font-size: 12pt;\n          transition:\n            top cubic-bezier(0.6, -0.28, 0.735, 0.045) 0.1s,\n            color cubic-bezier(0.6, -0.28, 0.735, 0.045) 0.1s,\n            font-size cubic-bezier(0.6, -0.28, 0.735, 0.045) 0.1s;\n        }\n\n      </style>\n      <div class=\"box\">\n        <input aria-label=\"${this.label}\" placeholder=\" \" />\n        <label>${this.label}<label>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      label: String,\n    };\n  }\n\n  ready() {\n    super.ready();\n    let inputEl = this._root.querySelector('input');\n    let boxEl = this._root.querySelector('.box');\n\n    inputEl.addEventListener('keyup', e => {\n      if(e.keyCode == 13) {\n        this.dispatchEvent(new CustomEvent('enter-pressed'));\n      }\n\n      this.dispatchEvent(new CustomEvent('text-entered', {\n        detail: {\n          text: e.target.value\n        }\n      }));\n    });\n\n    inputEl.addEventListener('focus', e => {\n      boxEl.className = 'box box-selected';\n    });\n\n    inputEl.addEventListener('blur', e => {\n      boxEl.className = 'box';\n    });\n\n    this.addEventListener('click', e => {\n      inputEl.focus();\n    });\n  }\n}\n\nwindow.customElements.define('wc-input', WcInput);\n"],"sourceRoot":""}